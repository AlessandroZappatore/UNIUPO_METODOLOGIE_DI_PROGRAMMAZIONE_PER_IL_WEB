• Recuperare la lista di tutti i task disponibili. FATTO

GET /tasks
REQ body: empty
RES body: lista task in JSON
Error: 404, {}
STATUS: 20x
EXAMPLE GET /tasks

{
  [
  {
   "id": 1,
   "descrizione": 'Prenotare il treno per Milano',
   "private": True,
   ....
  }, 

  {
   "id": 2, 
   "descrizione": 'Leggere l'ultimo libro di Dan Brown',
   "private": True,
   ....

  }, 
   ...
  ]
}

• Creare un nuovo task, fornendo tutte le informazioni rilevanti (eccetto l’id). FATTO

POST /tasks
REQ body: JSON del task
RES body: empty
Error: 500
EXAMPLE POST /tasks

{
  "descrizione": "Studiare Express", 
  ..., 
  "progetto": "MetWeb", 
  ....

}

• Recuperare un singolo task, dato il suo id. FATTO
GET /tasks/:id
REQ body: empty
RES body: task in JSON con id fornito
Error: 404, 500, {}
EXAMPLE GET /tasks/1
{
  "id": "1",
  "descrizione": "Studiare Express", 
  ..., 
  "progetto": "MetWeb", 
  ....
}

• Aggiornare un task esistente, fornendo tutte le informazioni rilevanti (tutte le proprietà tranne l’id
sovrascriveranno le proprietà correnti del task esistente con lo stesso ‘id’).
PUT /tasks/:id
REQ body: JSON
RES body: empty
Error: 404, {}
EXAMPLE: PUT /tasks/1 body:{JSON}

{
  "id": "1",
  "descrizione": "Prendere il treno",
  ....
  "private": True,
}

• Cancellare un task, dato il suo id. FATTO
DELETE /tasks/:id
REQ body: empty
RES body: 200
Error: 404
EXAMPLE: DELETE/tasks/1

{
}

• Segnare un task come “completato”. FATTO
PATCH /tasks/:id/completed
REQ body: empty
RES body: empty
Error: 404
EXAMPLE: PUT/tasks/1 

{

}

• Recuperare una lista di tutti i task che rispettino una certa proprietà, per esempio tutti i task
“importanti”, tutti quelli con una certa scadenza, ecc. Pensa alle funzionalità dei “filtri” e dei
“progetti” dei laboratori precedenti per una lista completa di opzioni.
